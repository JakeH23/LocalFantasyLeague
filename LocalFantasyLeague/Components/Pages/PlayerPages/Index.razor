@page "/players"
@rendermode InteractiveServer

<h3 class="text-center my-4 text-primary">All Players</h3>
<div class="row">
    <div class="col-3">
        <!-- Team Filter -->
        <div class="mb-3">
            <label for="teamFilter" class="form-label">Filter by Team:</label>
            <select id="teamFilter" class="form-select" @bind="SelectedTeamId">
                <option value="">All Teams</option>
                @foreach (var team in _teams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </select>
        </div>
    </div>
    @if (UserSession.CurrentUser != null)
    {
        <div class="col-3">
            <a class="btn btn-outline-primary mb-3" style="margin-top: 31px" href="/players/create">Add Player</a>
        </div>
    }
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="bg-light text-dark">
            <tr>
                <th>Name</th>
                <th>Team</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in _filteredPlayers)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Team?.Name</td>
                    <td>
                        @if (UserSession.CurrentUser == null || !UserSession.CurrentUser.Admin)
                        {
                            <a href="/players/details/@p.Id" class="btn btn-outline-info btn-sm">Details</a>
                        }
                        else
                        {
                            <a href="/players/details/@p.Id" class="btn btn-outline-info btn-sm me-2">Details</a>
                            <a href="/players/edit/@p.Id" class="btn btn-outline-warning btn-sm me-2">Edit</a>
                            <a href="/players/delete/@p.Id" class="btn btn-outline-danger btn-sm">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Player> _players = [];
    private List<Player> _filteredPlayers = [];
    private List<Team> _teams = [];
    internal int? SelectedTeamId
    {
        get => _selectedTeamIdBackingField;
        set
        {
            _selectedTeamIdBackingField = value;
            ApplyFilters();
        }
    }

    internal int? _selectedTeamIdBackingField;

    protected override async Task OnInitializedAsync()
    {
        _players = await PlayerService.GetPlayerListIncludingTeam();

        _teams = await DataService.GetAllAsync<Team>();

        SelectedTeamId = UserSession.CurrentUser?.TeamId ?? null;

        _filteredPlayers = _players; // Initially show all players
    }

    internal void ApplyFilters()
    {
        _filteredPlayers = _players;

        if (SelectedTeamId.HasValue)
        {
            _filteredPlayers = _filteredPlayers.Where(p => p.TeamId == SelectedTeamId).ToList();
        }

        InvokeAsync(StateHasChanged);
    }
}
