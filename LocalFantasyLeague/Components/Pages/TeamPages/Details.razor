@page "/teams/details/{id:int}"
@rendermode InteractiveServer

<h3 class="text-center my-4">Team Details</h3>

@if (Team == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <!-- Team Information -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Team Information</h4>
            </div>
            <div class="card-body">
                <p><strong>Name:</strong> @Team.Name</p>
            </div>
        </div>

        <!-- Players and Total Stats -->
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <h4 class="mb-0">
                    <button class="btn btn-link text-white text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#playersStats" aria-expanded="true" aria-controls="playersStats">
                        Players and Total Stats
                    </button>
                </h4>
            </div>
            <div id="playersStats" class="collapse show">
                <div class="card-body">
                    @if (Team.Players != null && Team.Players.Any())
                    {
                        <!-- Season Filter Dropdown -->
                        <div class="mb-3">
                            <label for="seasonFilter" class="form-label">Filter by Season:</label>
                            <select id="seasonFilter" class="form-select" @bind="SelectedSeasonId">
                                <option value="0">All Time</option>
                                @foreach (var season in _seasons)
                                {
                                    <option value="@season.Id">@season.Name (@season.StartDate.ToString("dd/MM/yyyy") - @season.EndDate.ToString("dd/MM/yyyy"))</option>
                                }
                            </select>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("Name")'>
                                            Player @SortingHelper.RenderSortIcon("Name", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("Appearances")'>
                                            Appearances @SortingHelper.RenderSortIcon("Appearances", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("Goals")'>
                                            Goals @SortingHelper.RenderSortIcon("Goals", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("Assists")'>
                                            Assists @SortingHelper.RenderSortIcon("Assists", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("YellowCards")'>
                                            Yellow Cards @SortingHelper.RenderSortIcon("YellowCards", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("RedCards")'>
                                            Red Cards @SortingHelper.RenderSortIcon("RedCards", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("PenaltySaves")'>
                                            Penalty Saves @SortingHelper.RenderSortIcon("PenaltySaves", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("CleanSheets")'>
                                            Clean Sheets @SortingHelper.RenderSortIcon("CleanSheets", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortPlayersTable("PenaltyMissed")'>
                                            Penalty Missed @SortingHelper.RenderSortIcon("PenaltyMissed", _currentSortColumn, _isSortAscending)
                                        </th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (var player in _filteredPlayers)
                                    {
                                        <tr>
                                            <td>
                                                <a class="text-decoration-none" href="/players/details/@player.Id">
                                                    @player.Name
                                                </a>
                                            </td>
                                            <td class="numeric-column">@player.Appearances</td>
                                            <td class="numeric-column">@player.Goals</td>
                                            <td class="numeric-column">@player.Assists</td>
                                            <td class="numeric-column">@player.YellowCards</td>
                                            <td class="numeric-column">@player.RedCards</td>
                                            <td class="numeric-column">@player.PenaltySaves</td>
                                            <td class="numeric-column">@player.CleanSheets</td>
                                            <td class="numeric-column">@player.PenaltyMissed</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No players available for this team.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Season Results -->
        <div class="card">
            <div class="card-header bg-warning text-dark">
                <h4 class="mb-0">
                    <button class="btn btn-link text-dark text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#seasonResults" aria-expanded="true" aria-controls="seasonResults">
                        Season Results
                    </button>
                </h4>
            </div>
            <div id="seasonResults" class="collapse show">
                <div class="card-body">
                    @if (_seasonResults != null && _seasonResults.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th style="cursor:pointer" @onclick='() => SortSeasonsTable("SeasonStartDate")'>
                                            Season @SortingHelper.RenderSortIcon("SeasonStartDate", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortSeasonsTable("TotalMatches")'>
                                            Total Matches @SortingHelper.RenderSortIcon("TotalMatches", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortSeasonsTable("Wins")'>
                                            Wins @SortingHelper.RenderSortIcon("Wins", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortSeasonsTable("Losses")'>
                                            Losses @SortingHelper.RenderSortIcon("Losses", _currentSortColumn, _isSortAscending)
                                        </th>
                                        <th style="cursor:pointer" @onclick='() => SortSeasonsTable("Draws")'>
                                            Draws @SortingHelper.RenderSortIcon("Draws", _currentSortColumn, _isSortAscending)
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var result in _seasonResults)
                                    {
                                        <tr>
                                            <td>
                                                <a class="text-decoration-none" href="/seasons/details/@result.SeasonId">
                                                    @result.SeasonName (@result.SeasonStartDate.ToString("dd/MM/yyyy") - @result.SeasonEndDate.ToString("dd/MM/yyyy"))
                                                </a>
                                            </td>
                                            <td class="numeric-column">@result.TotalMatches</td>
                                            <td class="numeric-column">@result.Wins</td>
                                            <td class="numeric-column">@result.Losses</td>
                                            <td class="numeric-column">@result.Draws</td>
                                        </tr>
                                    }

                                    <!-- Combined Results Row -->
                                    <tr class="table-secondary">
                                        <td><strong>All Time</strong></td>
                                        <td class="numeric-column"><strong>@_combinedResults.TotalMatches</strong></td>
                                        <td class="numeric-column"><strong>@_combinedResults.Wins</strong></td>
                                        <td class="numeric-column"><strong>@_combinedResults.Losses</strong></td>
                                        <td class="numeric-column"><strong>@_combinedResults.Draws</strong></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No matches available for this team.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Team? Team { get; set; }
    private List<Match> _matches = [];
    private List<Season> _seasons = [];
    private List<SeasonResult> _seasonResults = [];
    private SeasonResult _combinedResults = new();

    private int SelectedSeasonId
    {
        get => _selectedSeasonId;
        set
        {
            _selectedSeasonId = value;
            FilterStats();
        }
    }
    private int _selectedSeasonId;
    private List<PlayerStats> _filteredPlayers = [];
    private string _currentSortColumn = "";
    private bool _isSortAscending = false;

    protected override async Task OnInitializedAsync()
    {
        Team = await TeamService.GetTeamIncludingPlayersAndTheirStats(Id);

        _matches = await MatchService.GetMatchListIncludingSeasonsFilteredByTeamId(Id);

        _seasons = await SeasonService.GetSeasonListOrderedByDescendingStartDate();

        CalculateSeasonResults();

        // Pre-select the current season
        var today = DateTime.Today;
        SelectedSeasonId = _seasons.FirstOrDefault(s => today >= s.StartDate && today <= s.EndDate)?.Id ?? 0;

        FilterStats();

        _currentSortColumn = "Appearances";
        SortPlayersTable("Appearances");
    }

    private void CalculateSeasonResults()
    {
        if (_matches == null || !_matches.Any())
        {
            _seasonResults = new List<SeasonResult>();
            _combinedResults = new SeasonResult();
            return;
        }

        // Filter matches to include only those that have been played
        var playedMatches = _matches.Where(m => m.Kickoff <= DateTime.Now).ToList();

        // Group matches by season and calculate results
        _seasonResults = playedMatches
            .Where(m => m.Season != null)
            .GroupBy(m => m.Season!.Id)
            .Select(g =>
            {
                var season = _matches.First(m => m.Season!.Id == g.Key).Season!;
                var totalMatches = g.Count();
                var wins = g.Count(m => (m.HomeTeamId == Team!.Id && m.HomeTeamGoals > m.AwayTeamGoals) || (m.AwayTeamId == Team!.Id && m.AwayTeamGoals > m.HomeTeamGoals));
                var losses = g.Count(m => (m.HomeTeamId == Team!.Id && m.HomeTeamGoals < m.AwayTeamGoals) || (m.AwayTeamId == Team!.Id && m.AwayTeamGoals < m.HomeTeamGoals));
                var draws = g.Count(m => m.HomeTeamGoals == m.AwayTeamGoals);

                return new SeasonResult
                    {
                        SeasonId = season.Id,
                        SeasonName = season.Name,
                        SeasonStartDate = season.StartDate,
                        SeasonEndDate = season.EndDate,
                        TotalMatches = totalMatches,
                        Wins = wins,
                        Losses = losses,
                        Draws = draws
                    };
            })
            .OrderByDescending(r => r.SeasonStartDate)
            .ToList();

        // Calculate combined results
        _combinedResults = new SeasonResult
            {
                TotalMatches = playedMatches.Count,
                Wins = playedMatches.Count(m => (m.HomeTeamId == Team!.Id && m.HomeTeamGoals > m.AwayTeamGoals) || (m.AwayTeamId == Team!.Id && m.AwayTeamGoals > m.HomeTeamGoals)),
                Losses = playedMatches.Count(m => (m.HomeTeamId == Team!.Id && m.HomeTeamGoals < m.AwayTeamGoals) || (m.AwayTeamId == Team!.Id && m.AwayTeamGoals < m.HomeTeamGoals)),
                Draws = playedMatches.Count(m => m.HomeTeamGoals == m.AwayTeamGoals)
            };
    }


    private void FilterStats()
    {
        if (SelectedSeasonId == 0) // All Time
        {
            _filteredPlayers = Team?.Players.Select(player => new PlayerStats
                {
                    Id = player.Id,
                    Name = player.Name,
                    Appearances = player.PerformanceStats.Count(s => s.Appearance),
                    Goals = player.PerformanceStats.Sum(s => s.Goals),
                    Assists = player.PerformanceStats.Sum(s => s.Assists),
                    YellowCards = player.PerformanceStats.Count(s => s.YellowCard),
                    RedCards = player.PerformanceStats.Count(s => s.RedCard),
                    PenaltySaves = player.PerformanceStats.Sum(s => s.PenaltySaves),
                    CleanSheets = player.PerformanceStats.Count(s => s.CleanSheet),
                    PenaltyMissed = player.PerformanceStats.Sum(s => s.PenaltyMissed)
                }).ToList() ?? [];
        }
        else // Filter by Season
        {
            _filteredPlayers = Team?.Players.Select(player => new PlayerStats
                {
                    Id = player.Id,
                    Name = player.Name,
                    Appearances = player.PerformanceStats.Count(s => s.Appearance && s.Match?.SeasonId == SelectedSeasonId),
                    Goals = player.PerformanceStats.Where(s => s.Match?.SeasonId == SelectedSeasonId).Sum(s => s.Goals),
                    Assists = player.PerformanceStats.Where(s => s.Match?.SeasonId == SelectedSeasonId).Sum(s => s.Assists),
                    YellowCards = player.PerformanceStats.Count(s => s.YellowCard && s.Match?.SeasonId == SelectedSeasonId),
                    RedCards = player.PerformanceStats.Count(s => s.RedCard && s.Match?.SeasonId == SelectedSeasonId),
                    PenaltySaves = player.PerformanceStats.Where(s => s.Match?.SeasonId == SelectedSeasonId).Sum(s => s.PenaltySaves),
                    CleanSheets = player.PerformanceStats.Count(s => s.CleanSheet && s.Match?.SeasonId == SelectedSeasonId),
                    PenaltyMissed = player.PerformanceStats.Where(s => s.Match?.SeasonId == SelectedSeasonId).Sum(s => s.PenaltyMissed)
                }).ToList() ?? [];
        }
    }

    private void SortPlayersTable(string columnName)
    {
        SortingHelper.SortTable(ref _filteredPlayers, columnName, ref _currentSortColumn, ref _isSortAscending);
    }

    private void SortSeasonsTable(string columnName)
    {
        SortingHelper.SortTable(ref _seasonResults, columnName, ref _currentSortColumn, ref _isSortAscending);
    }
}
