@page "/seasons/details/{Id:int}"

<h3 class="text-center my-4">Season Details</h3>

@if (_season is null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <!-- Season Information -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Season Information</h4>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-3">Name</dt>
                    <dd class="col-sm-9">@_season.Name</dd>

                    <dt class="col-sm-3">Start Date</dt>
                    <dd class="col-sm-9">@_season.StartDate.ToString("MMM dd, yyyy")</dd>

                    <dt class="col-sm-3">End Date</dt>
                    <dd class="col-sm-9">@_season.EndDate.ToString("MMM dd, yyyy")</dd>
                </dl>
            </div>
        </div>
        <!-- User Team Summary -->
        @if (UserSession.CurrentUser != null && _userTeam != null)
        {
            <div class="card mb-4 shadow-sm border-info">
                <div class="card-header bg-info text-white d-flex align-items-center">
                    <h4 class="mb-0 flex-grow-1">@_userTeam.Name <span class="fw-light" style="font-size:1rem;">Season Summary</span></h4>
                </div>
                <div class="card-body">
                    <div class="row text-center g-3">
                        <div class="col-6 col-md-3">
                            <div class="p-3 rounded bg-success text-white fw-bold fs-5">Wins</div>
                            <div class="fs-4">@_wins</div>
                        </div>
                        <div class="col-6 col-md-3">
                            <div class="p-3 rounded bg-warning text-dark fw-bold fs-5">Draws</div>
                            <div class="fs-4">@_draws</div>
                        </div>
                        <div class="col-6 col-md-3">
                            <div class="p-3 rounded bg-danger text-white fw-bold fs-5">Losses</div>
                            <div class="fs-4">@_losses</div>
                        </div>
                        <div class="col-6 col-md-3">
                            <div class="p-3 rounded bg-primary text-white fw-bold fs-5">Total Points</div>
                            <div class="fs-4">@_points</div>
                        </div>
                        <div class="col-4 col-md-4 mt-3">
                            <div class="p-3 rounded bg-secondary text-white fw-bold fs-5">GF</div>
                            <div class="fs-4">@_goalsFor</div>
                        </div>
                        <div class="col-4 col-md-4 mt-3">
                            <div class="p-3 rounded bg-secondary text-white fw-bold fs-5">GA</div>
                            <div class="fs-4">@_goalsAgainst</div>
                        </div>
                        <div class="col-4 col-md-4 mt-3">
                            <div class="p-3 rounded bg-secondary text-white fw-bold fs-5">GD</div>
                            <div class="fs-4">@(_goalsFor - _goalsAgainst)</div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Matches -->
        <div class="card">
            <div class="card-header bg-secondary text-white">
                <h4 class="mb-0">Matches</h4>
            </div>
            <div class="card-body">
                @if (_matches.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-bordered">
                            <thead class="bg-light text-dark">
                                <tr>
                                    <th>Kickoff</th>
                                    <th>Home Team</th>
                                    <th>Away Team</th>
                                    <th>Result</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var match in _matches)
                                {
                                    <tr>
                                        <td>@match.Kickoff.ToString("MMM dd, yyyy")</td>
                                        <td>@match.HomeTeam.Name</td>
                                        <td>@match.AwayTeam.Name</td>
                                        <td>
                                            @if (match.Kickoff < DateTime.Now)
                                            {
                                                if (_userTeam != null && (match.HomeTeamId == _userTeam.Id || match.AwayTeamId == _userTeam.Id))
                                                {
                                                    bool isHome = match.HomeTeamId == _userTeam.Id;
                                                    int goalsFor = isHome ? match.HomeTeamGoals : match.AwayTeamGoals;
                                                    int goalsAgainst = isHome ? match.AwayTeamGoals : match.HomeTeamGoals;
                                                    string badgeClass = goalsFor > goalsAgainst
                                                    ? "bg-success"
                                                    : goalsFor == goalsAgainst
                                                    ? "bg-warning text-dark"
                                                    : "bg-danger";
                                                    <span class="badge @badgeClass">@match.HomeTeamGoals - @match.AwayTeamGoals</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@match.HomeTeamGoals - @match.AwayTeamGoals</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted">TBD</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No matches found for this season.</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private Season? _season;
    private List<Match> _matches = [];
    private Team? _userTeam;
    private int _wins, _draws, _losses, _points, _goalsFor, _goalsAgainst;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _season = await DataService.GetByIdAsync<Season>(Id);

        if (_season != null)
        {
            _matches = await MatchService.GetMatchListIncludingTeamsFilteredBySeasonId(_season.Id);

            if (UserSession.CurrentUser != null)
            {
                _userTeam = await TeamService.GetCurrentUserTeamForSeason(_season.Id, UserSession.CurrentUser?.TeamId);
                CalculateSeasonSummary();
            }
        }
    }

    private void CalculateSeasonSummary()
    {
        _wins = 0;
        _draws = 0;
        _losses = 0;
        _points = 0;
        _goalsFor = 0;
        _goalsAgainst = 0;

        if (_userTeam == null) return;

        foreach (var match in _matches.Where(m => m.Kickoff < DateTime.Now))
        {
            bool isHome = match.HomeTeamId == _userTeam.Id;
            bool isAway = match.AwayTeamId == _userTeam.Id;
            if (!isHome && !isAway) continue;

            int goalsFor = isHome ? match.HomeTeamGoals : match.AwayTeamGoals;
            int goalsAgainst = isHome ? match.AwayTeamGoals : match.HomeTeamGoals;

            _goalsFor += goalsFor;
            _goalsAgainst += goalsAgainst;

            if (goalsFor > goalsAgainst)
            {
                _wins++;
                _points += 2;
            }
            else if (goalsFor == goalsAgainst)
            {
                _draws++;
                _points += 1;
            }
            else
            {
                _losses++;
            }
        }
    }
}
