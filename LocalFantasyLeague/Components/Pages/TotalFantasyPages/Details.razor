@page "/fantasy-details"
@rendermode InteractiveServer

<h3 class="text-center my-4 text-primary">Fantasy Player Points and Stats</h3>

<div class="row">
    <div class="col-3">
        <!-- Season Filter -->

        <div class="mb-3">
            <label for="seasonFilter" class="form-label">Filter by Season:</label>
            <select id="seasonFilter" class="form-select" @bind="SelectedSeasonId">
                <option value="0">-- All Seasons --</option>
                @foreach (var season in _seasons)
                {
                    <option value="@season.Id">@season.Name (@season.StartDate.ToString("dd/MM/yyyy") - @season.EndDate.ToString("dd/MM/yyyy"))</option>
                }
            </select>
        </div>
    </div>
    <div class="col-3">
        <!-- Team Filter -->
        <div class="mb-3">
            <label for="teamFilter" class="form-label">Filter by Team:</label>
            <select id="teamFilter" class="form-select" @onchange="FilterPlayersByTeam">
                <option value="">All Teams</option>
                @foreach (var team in _teams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead>
            <tr>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("Name")'>
                    Player @SortingHelper.RenderSortIcon("Name", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("TeamName")'>
                    Team @SortingHelper.RenderSortIcon("TeamName", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("Appearances")'>
                    Appearances @SortingHelper.RenderSortIcon("Appearances", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("Goals")'>
                    Goals @SortingHelper.RenderSortIcon("Goals", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("Assists")'>
                    Assists @SortingHelper.RenderSortIcon("Assists", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("YellowCards")'>
                    Yellow Cards @SortingHelper.RenderSortIcon("YellowCards", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("RedCards")'>
                    Red Cards @SortingHelper.RenderSortIcon("RedCards", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("PenaltySaves")'>
                    Penalty Saves @SortingHelper.RenderSortIcon("PenaltySaves", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("CleanSheets")'>
                    Clean Sheets @SortingHelper.RenderSortIcon("CleanSheets", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("PenaltyMissed")'>
                    Penalty Missed @SortingHelper.RenderSortIcon("PenaltyMissed", _currentSortColumn, _isSortAscending)
                </th>
                <th style="cursor:pointer" @onclick='() => SortPlayersTable("AveragePointsPerGame")'>
                    Average PPG @SortingHelper.RenderSortIcon("AveragePointsPerGame", _currentSortColumn, _isSortAscending)
                </th>
                <th class="highlight-column" style="cursor:pointer" @onclick='() => SortPlayersTable("TotalPoints")'>
                    Total Points @SortingHelper.RenderSortIcon("TotalPoints", _currentSortColumn, _isSortAscending)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in _filteredPlayersWithPoints)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.TeamName</td>
                    <td class="numeric-column">@player.Appearances</td>
                    <td class="numeric-column">@player.Goals</td>
                    <td class="numeric-column">@player.Assists</td>
                    <td class="numeric-column">@player.YellowCards</td>
                    <td class="numeric-column">@player.RedCards</td>
                    <td class="numeric-column">@player.PenaltySaves</td>
                    <td class="numeric-column">@player.CleanSheets</td>
                    <td class="numeric-column">@player.PenaltyMissed</td>
                    <td class="numeric-column">@player.AveragePointsPerGame</td>
                    <td class="numeric-column highlight-column">@player.TotalPoints</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<PlayerWithPoints> _playersWithPoints = [];
    private List<PlayerWithPoints> _filteredPlayersWithPoints = [];
    private List<Team> _teams = [];
    private List<Season> _seasons = [];
    private int? _selectedTeamId;
    private int SelectedSeasonId
    {
        get => _selectedSeasonId;
        set
        {
            _selectedSeasonId = value;
            FilterPlayersBySeason();
        }
    }
    private int _selectedSeasonId = 0;
    private string _currentSortColumn = "";
    private bool _isSortAscending = false;

    protected override async Task OnInitializedAsync()
    {
        var players = await PlayerService.GetPlayerListIncludingStatsAndTeam();

        _teams = await DataService.GetAllAsync<Team>();
        _seasons = await DataService.GetAllAsync<Season>();

        _playersWithPoints = players.Select(player =>
        {
            // Calculate total points once
            var totalPoints = PointCalculator.CalculateTotalPoints(player.PerformanceStats);

            return new PlayerWithPoints
                {
                    Name = player.Name,
                    TeamName = player.Team?.Name ?? "No Team",
                    TeamId = player.TeamId,
                    Appearances = player.PerformanceStats.Count(stat => stat.Appearance),
                    Goals = player.PerformanceStats.Sum(stat => stat.Goals),
                    Assists = player.PerformanceStats.Sum(stat => stat.Assists),
                    YellowCards = player.PerformanceStats.Count(stat => stat.YellowCard),
                    RedCards = player.PerformanceStats.Count(stat => stat.RedCard),
                    PenaltySaves = player.PerformanceStats.Sum(stat => stat.PenaltySaves),
                    CleanSheets = player.PerformanceStats.Count(stat => stat.CleanSheet),
                    PenaltyMissed = player.PerformanceStats.Sum(stat => stat.PenaltyMissed),
                    AveragePointsPerGame = player.PerformanceStats.Count(stat => stat.Appearance) > 0
                                ? Math.Round(totalPoints / (double)player.PerformanceStats.Count(stat => stat.Appearance), 1)
                            : 0.0,
                    TotalPoints = totalPoints,
                    PerformanceStats = player.PerformanceStats
                };
        }).ToList();

        _filteredPlayersWithPoints = _playersWithPoints; // Initially show all players

        _currentSortColumn = "TotalPoints";
        SortPlayersTable("TotalPoints");
    }

    private void FilterPlayersByTeam(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var teamId))
        {
            _selectedTeamId = teamId;
            _filteredPlayersWithPoints = _playersWithPoints
                .Where(p => p.TeamId == teamId)
                .ToList();
        }
        else
        {
            _selectedTeamId = null;
            _filteredPlayersWithPoints = _playersWithPoints; // Show all players if no team is selected
        }

        _currentSortColumn = "TotalPoints";
        SortPlayersTable("TotalPoints");
        StateHasChanged(); // Notify Blazor to re-render the UI
    }

    private async void FilterPlayersBySeason()
    {
        if (SelectedSeasonId != 0)
        {
            // Get the selected season
            var season = _seasons.FirstOrDefault(s => s.Id == SelectedSeasonId);
            if (season != null)
            {
                // Fetch matches for the selected season
                var matchesInSeason = await MatchService.GetMatchIdListFilteredBySeasonId(season.Id);

                // Filter players based on performance stats in the selected season
                _filteredPlayersWithPoints = _playersWithPoints
                    .Select(player =>
                    {
                        var filteredStats = player.PerformanceStats
                            .Where(stat => matchesInSeason.Contains(stat.MatchId))
                            .ToList();

                        // Calculate total points once
                        var totalPoints = PointCalculator.CalculateTotalPoints(filteredStats);

                        return new PlayerWithPoints
                            {
                                Name = player.Name,
                                TeamName = player.TeamName,
                                TeamId = player.TeamId,
                                Appearances = filteredStats.Count(stat => stat.Appearance),
                                Goals = filteredStats.Sum(stat => stat.Goals),
                                Assists = filteredStats.Sum(stat => stat.Assists),
                                YellowCards = filteredStats.Count(stat => stat.YellowCard),
                                RedCards = filteredStats.Count(stat => stat.RedCard),
                                PenaltySaves = filteredStats.Sum(stat => stat.PenaltySaves),
                                CleanSheets = filteredStats.Count(stat => stat.CleanSheet),
                                PenaltyMissed = filteredStats.Sum(stat => stat.PenaltyMissed),
                                AveragePointsPerGame = filteredStats.Count(stat => stat.Appearance) > 0
                                        ? Math.Round(totalPoints / (double)filteredStats.Count(stat => stat.Appearance), 1)
                                    : 0.0,
                                TotalPoints = PointCalculator.CalculateTotalPoints(filteredStats)
                            };
                    })
                    .Where(player => player.Appearances > 0) // Only include players with appearances
                    .ToList();
            }
        }
        else
        {
            // Show all players if no season is selected
            _filteredPlayersWithPoints = _playersWithPoints;
        }

        _currentSortColumn = "TotalPoints";
        SortPlayersTable("TotalPoints");
        StateHasChanged(); // Notify Blazor to re-render the UI
    }

    private void SortPlayersTable(string columnName)
    {
        SortingHelper.SortTable(ref _filteredPlayersWithPoints, columnName, ref _currentSortColumn, ref _isSortAscending);
    }
}
