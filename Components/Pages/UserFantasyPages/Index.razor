@page "/user-fantasy"
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory
@inject UserSession UserSession

<h3 class="text-center my-4 text-secondary">My Fantasy Picks</h3>

<!-- Upcoming Matches Section -->
<h4 class="text-info">Upcoming Matches</h4>
<div class="table-responsive mb-5">
    <table class="table table-striped table-hover table-bordered">
        <thead class="bg-light text-dark">
            <tr>
                <th>Kickoff</th>
                <th>Opponent</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in UpcomingMatches)
            {
                <tr>
                    <td>@match.Kickoff.ToString("d")</td>
                    <td>@(match.HomeTeamId == UserSession.CurrentUser.TeamId ? match.AwayTeam.Name : match.HomeTeam.Name)</td>
                    <td>
                        @if (UserFantasySelections.Any(selection => selection.MatchId == match.Id))
                        {
                            <a href="/user-fantasy/edit/@match.Id" class="btn btn-outline-warning btn-sm">Edit Team</a>
                        }
                        else
                        {
                            <a href="/user-fantasy/create/@match.Id" class="btn btn-outline-primary btn-sm">Pick Team</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Past Matches Section -->
<h4 class="text-success">Past Matches</h4>
<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="bg-light text-dark">
            <tr>
                <th>Kickoff</th>
                <th>Opponent</th>
                <th>Selected Players</th>
                <th>Total Points</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in PastMatches)
            {
                var selection = UserFantasySelections.FirstOrDefault(s => s.MatchId == match.Id);
                if (selection != null)
                {
                    <tr>
                        <td>@match.Kickoff.ToString("d")</td>
                        <td>@(match.HomeTeamId == UserSession.CurrentUser.TeamId ? match.AwayTeam.Name : match.HomeTeam.Name)</td>
                        <td>
                            @if (selection.Players.Any())
                            {
                                <div class="d-flex flex-wrap">
                                    @foreach (var playerInfo in selection.Players
                                   .Select(playerId => new
                                   {
                                       Player = Players.FirstOrDefault(p => p.Id == playerId),
                                       Points = PlayerPoints.ContainsKey(match.Id) && PlayerPoints[match.Id].ContainsKey(playerId)
                                   ? PlayerPoints[match.Id][playerId]
                                   : 0,
                                       IsCaptain = selection.CaptainedPlayerId == playerId
                                   })
                                   .OrderByDescending(p => p.Points))
                                    {
                                        if (playerInfo.Player != null)
                                        {
                                            <span class="badge bg-secondary text-white me-1 mb-1">
                                                @playerInfo.Player.Name (@playerInfo.Points pts)
                                                @if (playerInfo.IsCaptain)
                                                {
                                                    <span class="badge bg-danger ms-1">C</span>
                                                }
                                            </span>
                                        }
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            <span class="badge bg-success fs-5">@GameTotalPoints[match.Id]</span>
                        </td>
                        <td>
                            <a href="/user-fantasy/details/@selection.Id" class="btn btn-outline-info btn-sm me-2">Fantasy Details</a>
                            <a href="/matches/details/@match.Id" class="btn btn-outline-secondary btn-sm">Match Details</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
        <tfoot>
            <tr class="bg-light">
                <td colspan="4" class="text-end fw-bold text-dark">Overall Total Points:</td>
                <td class="fw-bold text-success fs-4">@OverallTotalPoints</td>
            </tr>
        </tfoot>
    </table>
</div>

@code {
    private List<Match> Matches = new();
    private List<Match> UpcomingMatches = new();
    private List<Match> PastMatches = new();
    private List<Team> Teams = new();
    private List<UserFantasySelection> UserFantasySelections = new();
    private List<Player> Players = new();
    private Dictionary<int, Dictionary<int, int>> PlayerPoints = new();
    private Dictionary<int, int> GameTotalPoints = new();
    private int OverallTotalPoints = 0;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        // Load matches
        Matches = await context.Matches
            .Include(m => m.HomeTeam)
            .Include(m => m.AwayTeam)
            .OrderBy(m => m.Kickoff)
            .ToListAsync();
        Matches = Matches.Where(x => x.HomeTeamId == UserSession.CurrentUser.TeamId || x.AwayTeamId == UserSession.CurrentUser.TeamId).ToList();

        // Split matches into upcoming and past
        var now = DateTime.Now;
        UpcomingMatches = Matches.Where(m => m.Kickoff >= now).ToList();
        PastMatches = Matches.Where(m => m.Kickoff < now).ToList();

        // Load teams
        Teams = await context.Teams.ToListAsync();
        Teams = Teams.Where(x => x.Id == UserSession.CurrentUser.TeamId).ToList();

        // Load user fantasy selections
        UserFantasySelections = await context.UserFantasySelections
            .Where(selection => selection.UserId == UserSession.CurrentUser.Id)
            .ToListAsync();

        // Load players
        var playerIds = UserFantasySelections.SelectMany(s => s.Players).Distinct().ToList();
        Players = await context.Players
            .Where(p => playerIds.Contains(p.Id))
            .ToListAsync();

        // Load performance stats and calculate points
        var pastMatchIds = PastMatches.Select(m => m.Id).ToList();
        var performanceStats = await context.PerformanceStats
            .Where(ps => pastMatchIds.Contains(ps.MatchId))
            .ToListAsync();

        foreach (var selection in UserFantasySelections)
        {
            var matchStats = performanceStats.Where(ps => ps.MatchId == selection.MatchId).ToList();
            int gameTotal = 0;

            foreach (var playerId in selection.Players)
            {
                var playerStats = matchStats.Where(ps => ps.PlayerId == playerId).ToList();
                var points = PointCalculator.CalculateTotalPoints(playerStats);

                // Double points for captain
                if (selection.CaptainedPlayerId == playerId)
                {
                    points *= 2;
                }

                if (!PlayerPoints.ContainsKey(selection.MatchId))
                {
                    PlayerPoints[selection.MatchId] = new Dictionary<int, int>();
                }

                PlayerPoints[selection.MatchId][playerId] = points;
                gameTotal += points;
            }

            GameTotalPoints[selection.MatchId] = gameTotal;
            OverallTotalPoints += gameTotal;
        }

        StateHasChanged();
    }
}
