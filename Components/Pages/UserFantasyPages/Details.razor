@page "/user-fantasy/details/{selectionId:int}"
@using LocalFantasyLeague.Models.DbSets
@using LocalFantasyLeague.Models.DbSets
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory

<h3 class="text-center my-4">Fantasy Selection Details</h3>

@if (_selectedPlayers.Count == 0)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <!-- Fantasy Team Section -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Your Fantasy Team</h4>
                <p class="mb-0">Total Points: @_totalPoints</p>
            </div>
            <div class="card-body">
                <div class="pitch">
                    @RenderPositionRow(_selectedPlayers)
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int SelectionId { get; set; }

    private List<Player> _selectedPlayers = [];
    private Player? _captain;
    private readonly Dictionary<int, int> _playerPoints = new();
    private int _totalPoints = 0;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        var selection = await DataService.GetByIdAsync<UserFantasySelection>(SelectionId);

        if (selection != null)
        {
            // Fetch players based on their IDs
            var playerIds = selection.Players; // Assuming this is a collection of player IDs

            _selectedPlayers = await context.Players
            .Where(p => playerIds.Contains(p.Id))
            .ToListAsync();

            _captain = _selectedPlayers.FirstOrDefault(p => p.Id == selection.CaptainedPlayerId);

            // Fetch performance stats for the match
            var performanceStats = await context.PerformanceStats
                .Where(ps => ps.MatchId == selection.MatchId && _selectedPlayers.Select(p => p.Id).Contains(ps.PlayerId))
                .ToListAsync();

            // Calculate points for each player
            foreach (var stat in performanceStats)
            {
                var points = PointCalculator.CalculateTotalPoints([stat]);
                _playerPoints[stat.PlayerId] = points;

                // Double points for the captain
                if (_captain != null && stat.PlayerId == _captain.Id)
                {
                    points *= 2;
                }

                _totalPoints += points;
            }
        }
    }

    RenderFragment RenderPositionRow(List<Player> players) => @<div class="position-row mb-1">
        <div class="d-flex justify-content-center flex-wrap">
            @foreach (var player in players)
        {
        var isCaptain = _captain != null && player.Id == _captain.Id;
        var points = _playerPoints.ContainsKey(player.Id) ? isCaptain ? _playerPoints[player.Id] * 2 : _playerPoints[player.Id] : 0;

            <div class="player-card text-center mb-0 m-2">
                <div class="shirt mb-0">
                    <svg width="100px" height="100px" viewBox="0 -7.72 127.24603 127.24603" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" y="0px" x="0px" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" enable-background="new 0 0 856 412" class="player-shirt">
                    <path d="m32 109c-1.4 0-2.5-1.1-2.5-2.5v-62.6l-7 5.9c-.1.1-.2.1-.2.2-1 .6-2.1 1-3.2 1-2 0-3.8-1-4.9-2.6l-10.7-15.6c-1.8-2.7-1-6.3 1.7-8.1l29.7-20.7c.2-.1.4-.3.7-.3.1 0 2.8-.9 6.6-1h3.1c.7 0 1.4.3 1.8.8.5.5.7 1.2.6 1.9 0 .1 0 .3-.1.4.2 7.5 8.1 14.5 16.5 14.5s16.3-7 16.5-14.5c0-.1 0-.3-.1-.4-.1-.7.2-1.4.6-1.9s1.1-.8 1.8-.8h6.1c2.4 0 4.3 1.1 4.5 1.2.1 0 .1.1.2.1l28.7 20.7c2.6 1.7 3.4 5.4 1.6 8.1l-10.7 15.2c-1 1.6-2.9 2.6-4.9 2.6-1.2 0-2.3-.3-3.2-1-.1 0-.1-.1-.2-.2l-6.4-5.3-.2 62.9c0 1.4-1.1 2.5-2.5 2.5l-63.9 1z" fill="#006"></path>
                    <path d="m42.2 2.5c-3.8.1-6.5 1-6.6 1-.3 0-.5.2-.7.3l-3 2.09v51h-2.4v50.1c0 1 1.1 2 2.5 2h63.9c1.4 0 2.5-1 2.5-2l.1-50.2h-2.6v-51.4l-2.2-1.6c-.1 0-.1-.1-.2-.1-.2-.1-2.1-1.2-4.5-1.2h-6.1c-.7 0-1.4.3-1.8.8s-.7 1.2-.6 1.9c.1.1.1.3.1.4-.2 7.5-8.1 14.5-16.5 14.5s-16.3-7-16.5-14.5c.1-.1.1-.3.1-.4.1-.7-.1-1.4-.6-1.9-.4-.5-1.1-.8-1.8-.8h-3.1z" fill="#fe0"></path>
                                    </svg>
                </div>
                <div class="player-info">
                    <div class="player-name text-dark fw-bold" style="font-size:14px">
                        @player.Name @if (isCaptain) {
                        <span class="text-danger"> (C)</span>
                    }
                    </div>
                    <div class="player-points text-muted" style="font-size:14px">Points: @points</div>
                </div>
            </div>
        }
        </div>
    </div>;
}
