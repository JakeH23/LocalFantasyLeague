@page "/user-fantasy/edit/{selectionId:int}"
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory

<h3>Edit Fantasy Selection</h3>

<div>
    <label for="playerSelect" class="form-label">Select Players (Max 3 from the same team):</label>
    <select id="playerSelect" class="form-select" @onchange="OnPlayerSelected">
        <option value="">-- Select a Player --</option>
        @foreach (var player in _players)
        {
            <option value="@player.Id">@player.Name (@player.Team.Name)</option>
        }
    </select>
</div>

<div class="mt-3">
    <h5>Selected Players:</h5>
    <ul>
        @foreach (var player in _selectedPlayers)
        {
            <li>
                @player.Name
                <button class="btn btn-sm btn-danger" @onclick="() => RemovePlayer(player.Id)">Remove</button>
            </li>
        }
    </ul>
</div>

<div class="mt-3">
    <label for="captainSelect" class="form-label">Select Captain (Optional):</label>
    <select id="captainSelect" class="form-select" @bind="_captainedPlayerId">
        <option value="">-- No Captain --</option>
        @foreach (var player in _selectedPlayers)
        {
            <option value="@player.Id">@player.Name</option>
        }
    </select>
</div>

<button class="btn btn-primary mt-3" @onclick="SaveSelection" disabled="@(!CanSave)">Save</button>

@code {
    [Parameter] public int SelectionId { get; set; }

    private List<Player> _players = [];
    private List<Player> _selectedPlayers = [];
    private int? _captainedPlayerId;
    private bool CanSave => _selectedPlayers.Count == 3;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        // Load the existing selection
        var selection = await DataService.GetByIdAsync<UserFantasySelection>(SelectionId);

        if (selection != null)
        {
            // Load the players for the selection
            _selectedPlayers = await context.Players.Where(p => selection.Players.Contains(p.Id)).ToListAsync();

            // Set the captain
            _captainedPlayerId = selection.CaptainedPlayerId;

            // Load all players for the match
            var match = await context.Matches
                .Include(m => m.HomeTeam)
                .Include(m => m.AwayTeam)
                .FirstOrDefaultAsync(m => m.Id == selection.MatchId);

            if (match != null)
            {
                _players = await context.Players
                    .Include(p => p.Team)
                    .Where(p => p.TeamId == match.HomeTeamId || p.TeamId == match.AwayTeamId)
                    .ToListAsync();
            }
        }
    }

    private void OnPlayerSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var playerId) && _selectedPlayers.Count < 3)
        {
            var player = _players.FirstOrDefault(p => p.Id == playerId);
            if (player != null && _selectedPlayers.All(p => p.Id != playerId))
            {
                _selectedPlayers.Add(player);
            }
        }
    }

    private void RemovePlayer(int playerId)
    {
        _selectedPlayers.RemoveAll(p => p.Id == playerId);
        if (_captainedPlayerId == playerId)
        {
            _captainedPlayerId = null;
        }
    }

    private async Task SaveSelection()
    {
        // Update the existing selection
        var selection = await DataService.GetByIdAsync<UserFantasySelection>(SelectionId);
        if (selection != null)
        {
            selection.Players = _selectedPlayers.Select(p => p.Id).ToList();
            selection.CaptainedPlayerId = _captainedPlayerId;
            await DataService.UpdateAsync(selection);
        }

        // Navigate back to the main page
        Navigation.NavigateTo("/user-fantasy");
    }
}
