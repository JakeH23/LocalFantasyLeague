@page "/players"
@rendermode InteractiveServer
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory
@inject UserSession UserSession

<h3>Players</h3>
@if (UserSession.CurrentUser != null)
{
    <a class="btn btn-primary mb-3" href="/players/create">Add Player</a>
}
<div class="mb-3">
    <label for="teamFilter" class="form-label">Filter by Team:</label>
    <select id="teamFilter" class="form-select" @onchange="FilterPlayersByTeam">
        <option value="">All Teams</option>
        @foreach (var team in Teams)
        {
            <option value="@team.Id">@team.Name</option>
        }
    </select>
</div>

<table class="table">
    <thead><tr><th>Name</th><th>Team</th><th>Actions</th></tr></thead>
    <tbody>
        @foreach (var p in FilteredPlayers)
        {
            <tr>
                <td>@p.Name</td>
                <td>@p.Team?.Name</td>
                <td>
                    @if (UserSession.CurrentUser == null)
                    {
                        <a href="/players/details/@p.Id">Details</a>
                    }
                    else
                    {
                        <a href="/players/details/@p.Id">Details</a>
                        <a href="/players/edit/@p.Id">Edit</a>
                        <a href="/players/delete/@p.Id">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Player> Players = new();
    private List<Player> FilteredPlayers = new();
    private List<Team> Teams = new();
    private int? SelectedTeamId;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        Players = await db.Players.Include(p => p.Team).ToListAsync();
        Teams = await db.Teams.ToListAsync();
        FilteredPlayers = Players; // Initially show all players
    }

    private void FilterPlayersByTeam(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var teamId))
        {
            SelectedTeamId = teamId;
            FilteredPlayers = Players.Where(p => p.TeamId == teamId).ToList();
        }
        else
        {
            SelectedTeamId = null;
            FilteredPlayers = Players; // Show all players if no team is selected
        }

        // Notify Blazor to re-render the UI
        StateHasChanged();
    }
}
