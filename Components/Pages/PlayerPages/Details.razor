@page "/players/details/{id:int}"
@rendermode InteractiveServer
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory
@inject NavigationManager NavigationManager

<h3 class="text-center my-4">Player Details</h3>

@if (Player == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <!-- Player Information -->
        <div class="card mb-4">
            <div class="card-header">
                <h4>
                    <button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#playerInfo" aria-expanded="true" aria-controls="playerInfo">
                        Player Information
                    </button>
                </h4>
            </div>
            <div id="playerInfo" class="collapse show">
                <div class="card-body">
                    <p><strong>Name:</strong> @Player.Name</p>
                    <p><strong>Position:</strong> @Player.Position</p>
                    <p><strong>Team:</strong> @(Player.Team?.Name ?? "No Team")</p>
                </div>
            </div>
        </div>

        <!-- Match Stats -->
        <div class="card mb-4">
            <div class="card-header">
                <h4>
                    <button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#matchStats" aria-expanded="true" aria-controls="matchStats">
                        Match Stats
                    </button>
                </h4>
            </div>
            <div id="matchStats" class="collapse show">
                <div class="card-body">
                    @if (PaginatedStats.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Match</th>
                                        <th>Kickoff</th>
                                        <th>Appearances</th>
                                        <th>Goals</th>
                                        <th>Assists</th>
                                        <th>Yellow Cards</th>
                                        <th>Red Cards</th>
                                        <th>Penalty Saves</th>
                                        <th>Clean Sheets</th>
                                        <th>Penalty Missed</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stat in PaginatedStats)
                                    {
                                        <tr>
                                            <td>@stat.Match?.HomeTeam?.Name vs @stat.Match?.AwayTeam?.Name</td>
                                            <td>@stat.Match?.Kickoff.ToString("g")</td>
                                            <td>
                                                @if (stat.Appearance)
                                                {
                                                    <i class="fas fa-check text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times text-danger"></i>
                                                }
                                            </td>
                                            <td>@stat.Goals</td>
                                            <td>@stat.Assists</td>
                                            <td>
                                                @if (stat.YellowCard)
                                                {
                                                    <i class="fas fa-check text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times text-danger"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (stat.RedCard)
                                                {
                                                    <i class="fas fa-check text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times text-danger"></i>
                                                }
                                            </td>
                                            <td>@stat.PenaltySaves</td>
                                            <td>
                                                @if (stat.CleanSheet)
                                                {
                                                    <i class="fas fa-check text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times text-danger"></i>
                                                }
                                            </td>
                                            <td>@stat.PenaltyMissed</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-center mt-3">
                            <nav>
                                <ul class="pagination">
                                    <li class="page-item @(IsFirstPage ? "disabled" : "")">
                                        <button class="page-link" @onclick="PreviousPage" disabled="@IsFirstPage">
                                            <i class="bi bi-arrow-left"></i> Previous
                                        </button>
                                    </li>
                                    <li class="page-item disabled">
                                        <span class="page-link">Page @CurrentPage of @TotalPages</span>
                                    </li>
                                    <li class="page-item @(IsLastPage ? "disabled" : "")">
                                        <button class="page-link" @onclick="NextPage" disabled="@IsLastPage">
                                            Next <i class="bi bi-arrow-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                    else
                    {
                        <p>No match stats available for this player.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Total Combined Stats -->
        <div class="card">
            <div class="card-header">
                <h4>
                    <button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#totalStats" aria-expanded="true" aria-controls="totalStats">
                        Total Combined Stats
                    </button>
                </h4>
            </div>
            <div id="totalStats" class="collapse show">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>Appearances</th>
                                    <th>Goals</th>
                                    <th>Assists</th>
                                    <th>Yellow Cards</th>
                                    <th>Red Cards</th>
                                    <th>Penalty Saves</th>
                                    <th>Clean Sheets</th>
                                    <th>Penalty Missed</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@TotalAppearances</td>
                                    <td>@TotalGoals</td>
                                    <td>@TotalAssists</td>
                                    <td>@TotalYellowCards</td>
                                    <td>@TotalRedCards</td>
                                    <td>@TotalPenaltySaves</td>
                                    <td>@TotalCleanSheets</td>
                                    <td>@TotalPenaltyMissed</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Parameter]
    public int Id { get; set; }

    private LocalFantasyLeagueContext context = default!;
    private Player? Player { get; set; }

    // Pagination state
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)(Player?.PerformanceStats?.Count() ?? 0) / PageSize));
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    private IEnumerable<PerformanceStat> PaginatedStats =>
        Player?.PerformanceStats?
            .OrderByDescending(s => s.Match?.Kickoff)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            ?? Enumerable.Empty<PerformanceStat>();

    private int TotalAppearances => Player?.PerformanceStats?.Count(s => s.Appearance) ?? 0;
    private int TotalGoals => Player?.PerformanceStats?.Sum(s => s.Goals) ?? 0;
    private int TotalAssists => Player?.PerformanceStats?.Sum(s => s.Assists) ?? 0;
    private int TotalYellowCards => Player?.PerformanceStats?.Count(s => s.YellowCard) ?? 0;
    private int TotalRedCards => Player?.PerformanceStats?.Count(s => s.RedCard) ?? 0;
    private int TotalPenaltySaves => Player?.PerformanceStats?.Sum(s => s.PenaltySaves) ?? 0;
    private int TotalCleanSheets => Player?.PerformanceStats?.Count(s => s.CleanSheet) ?? 0;
    private int TotalPenaltyMissed => Player?.PerformanceStats?.Sum(s => s.PenaltyMissed) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Player = await context.Players
            .Include(p => p.Team)
            .Include(p => p.PerformanceStats)
                .ThenInclude(ps => ps.Match)
                .ThenInclude(m => m.HomeTeam)
            .Include(p => p.PerformanceStats)
                .ThenInclude(ps => ps.Match)
                .ThenInclude(m => m.AwayTeam)
            .FirstOrDefaultAsync(p => p.Id == Id);
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            StateHasChanged(); // Ensure UI updates
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}
