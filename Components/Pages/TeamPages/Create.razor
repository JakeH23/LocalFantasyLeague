@page "/teams/create"
@rendermode InteractiveServer

<h3>Create Team</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm method="post" Model="_team" OnValidSubmit="Save" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Team Name Input -->
            <div class="mb-3">
                <label for="teamName" class="form-label">Team Name</label>
                <InputText id="teamName" class="form-control" @bind-Value="_team.Name" placeholder="Enter team name" />
            </div>

            <!-- Player Selection -->
            <h4>Add Players</h4>
            <div class="mb-3">
                <label for="playerSelect" class="form-label">Select Player</label>
                <select id="playerSelect" class="form-select" @bind="_selectedPlayerId">
                    <option value="">-- Select Player --</option>
                    @foreach (var player in _availablePlayers)
                    {
                        <option value="@player.Id">@player.Name</option>
                    }
                </select>
            </div>
            <button type="button" class="btn btn-secondary mb-3" @onclick="AddPlayer">Add Player</button>

            <!-- Display Added Players -->
            <h5>Players in Team</h5>
            <ul class="list-group mb-3">
                @foreach (var player in _team.Players)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @player.Name
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemovePlayer(player)">Remove</button>
                    </li>
                }
            </ul>

            <!-- Save Button -->
            <button type="submit" class="btn btn-primary">Save Team</button>
        </EditForm>
    </div>
</div>

@code {
    private List<Player> _availablePlayers = [];
    private int? _selectedPlayerId;
    private readonly Team _team = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize the database context and fetch available players
        _availablePlayers = await DataService.GetAllAsync<Player>();
    }

    private void AddPlayer()
    {
        if (_selectedPlayerId.HasValue)
        {
            var player = _availablePlayers.FirstOrDefault(p => p.Id == _selectedPlayerId.Value);
            if (player != null && _team.Players.All(p => p.Id != player.Id))
            {
                _team.Players.Add(player);
            }
        }
    }

    private void RemovePlayer(Player player)
    {
        _team.Players.Remove(player);
    }

    private async Task Save()
    {
        // Add the team to the database and save changes
        await DataService.AddAsync(_team);
        Navigation.NavigateTo("/teams");
    }
}
