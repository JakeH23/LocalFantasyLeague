@page "/teams/details/{id:int}"
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory
@inject NavigationManager NavigationManager

<h3 class="text-center my-4">Team Details</h3>

@if (Team == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">
        <!-- Team Information -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Team Information</h4>
            </div>
            <div class="card-body">
                <p><strong>Name:</strong> @Team.Name</p>
            </div>
        </div>

        <!-- Players and Total Stats -->
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <h4 class="mb-0">
                    <button class="btn btn-link text-white text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#playersStats" aria-expanded="true" aria-controls="playersStats">
                        Players and Total Stats
                    </button>
                </h4>
            </div>
            <div id="playersStats" class="collapse show">
                <div class="card-body">
                    @if (Team.Players != null && Team.Players.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Player</th>
                                        <th>Appearances</th>
                                        <th>Goals</th>
                                        <th>Assists</th>
                                        <th>Yellow Cards</th>
                                        <th>Red Cards</th>
                                        <th>Penalty Saves</th>
                                        <th>Clean Sheets</th>
                                        <th>Penalty Missed</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var player in Team.Players)
                                    {
                                        <tr>
                                            <td>
                                                <a class="text-decoration-none" href="/players/details/@player.Id">
                                                    @player.Name
                                                </a>
                                            </td>
                                            <td class="numeric-column">@player.PerformanceStats.Count(s => s.Appearance)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Sum(s => s.Goals)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Sum(s => s.Assists)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Count(s => s.YellowCard)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Count(s => s.RedCard)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Sum(s => s.PenaltySaves)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Count(s => s.CleanSheet)</td>
                                            <td class="numeric-column">@player.PerformanceStats.Sum(s => s.PenaltyMissed)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No players available for this team.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Match Results -->
        <div class="card">
            <div class="card-header bg-warning text-dark">
                <h4 class="mb-0">
                    <button class="btn btn-link text-dark text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#matchResults" aria-expanded="true" aria-controls="matchResults">
                        Match Results
                    </button>
                </h4>
            </div>
            <div id="matchResults" class="collapse show">
                <div class="card-body">
                    @if (Matches != null && Matches.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Date</th>
                                        <th>Opponent</th>
                                        <th class="highlight-column">Result</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var match in Matches)
                                    {
                                        var isHomeTeam = match.HomeTeamId == Team.Id;
                                        var teamScore = isHomeTeam ? match.HomeTeamGoals : match.AwayTeamGoals;
                                        var opponentScore = isHomeTeam ? match.AwayTeamGoals : match.HomeTeamGoals;
                                        var opponentName = isHomeTeam ? match.AwayTeam?.Name : match.HomeTeam?.Name;
                                        var resultClass = match.Kickoff > DateTime.Now
                                        ? "text-muted"
                                        : teamScore > opponentScore
                                        ? "text-success"
                                        : teamScore < opponentScore
                                        ? "text-danger"
                                        : "";

                                        <tr>
                                            <td>
                                                <a class="text-decoration-none" href="/matches/details/@match.Id">
                                                    @match.Kickoff.ToString("MMM dd, yyyy")
                                                </a>
                                            </td>
                                            <td>@opponentName</td>
                                            <td class="@resultClass highlight-column">
                                                @if (match.Kickoff > DateTime.Now)
                                                {
                                                    <span>TBD</span>
                                                }
                                                else if (teamScore > opponentScore)
                                                {
                                                    <span>Win (@teamScore - @opponentScore)</span>
                                                }
                                                else if (teamScore < opponentScore)
                                                {
                                                    <span>Loss (@teamScore - @opponentScore)</span>
                                                }
                                                else
                                                {
                                                    <span>Draw (@teamScore - @opponentScore)</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No matches available for this team.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private LocalFantasyLeagueContext context = default!;
    private Team? Team { get; set; }
    private List<Match> Matches = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Team = await context.Teams
            .Include(t => t.Players)
                .ThenInclude(p => p.PerformanceStats)
            .FirstOrDefaultAsync(t => t.Id == Id);
        Matches = await context.Matches
        .Where(m => m.HomeTeamId == Id || m.AwayTeamId == Id)
        .Include(m => m.HomeTeam)
        .Include(m => m.AwayTeam)
        .ToListAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}
