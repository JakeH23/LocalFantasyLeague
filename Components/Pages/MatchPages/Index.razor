@page "/matches"
@rendermode InteractiveServer
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory

<h3 class="text-center my-4 text-primary">All Matches</h3>
@if (UserSession.CurrentUser != null)
{
    <a href="/matches/create" class="btn btn-outline-primary mb-3">Add Match</a>
}

<div class="row">
    <div class="col-3">
        <!-- Season Filter -->

        <div class="mb-3">
            <label for="seasonFilter" class="form-label">Filter by Season:</label>
            <select id="seasonFilter" class="form-select" @bind="SelectedSeasonId">
                <option value="">All Seasons</option>
                @foreach (var season in _seasons)
                {
                    <option value="@season.Id">@season.Name (@season.StartDate.ToString("MMM dd, yyyy") - @season.EndDate.ToString("MMM dd, yyyy"))</option>
                }
            </select>
        </div>
    </div>
    <div class="col-3">
        <!-- Team Filter -->
        <div class="mb-3">
            <label for="teamFilter" class="form-label">Filter by Team:</label>
            <select id="teamFilter" class="form-select" @bind="SelectedTeamId">
                <option value="">All Teams</option>
                @foreach (var team in _teams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="bg-light text-dark">
            <tr>
                <th>Kickoff</th>
                <th>Home</th>
                <th>Away</th>
                <th>Result</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in PaginatedMatches)
            {
                <tr>
                    <td>@match.Kickoff.ToString("MMM dd, yyyy")</td>
                    <td>@match.HomeTeam.Name</td>
                    <td>@match.AwayTeam.Name</td>
                    <td>
                        @if (match.Kickoff < DateTime.Now)
                        {
                            <span class="badge bg-success">@match.HomeTeamGoals - @match.AwayTeamGoals</span>
                        }
                        else
                        {
                            <span class="text-muted">TBD</span>
                        }
                    </td>
                    <td>
                        @if (UserSession.CurrentUser == null)
                        {
                            <a href="/matches/details/@match.Id" class="btn btn-outline-info btn-sm">Details</a>
                        }
                        else
                        {
                            <a href="/matches/details/@match.Id" class="btn btn-outline-info btn-sm me-2">Details</a>
                            <a href="/matches/edit/@match.Id" class="btn btn-outline-warning btn-sm me-2">Edit</a>
                            <a href="/matches/delete/@match.Id" class="btn btn-outline-danger btn-sm">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-flex justify-content-center mt-3">
    <nav>
        <ul class="pagination">
            <li class="page-item @(IsFirstPage ? "disabled" : "")">
                <button class="page-link" @onclick="PreviousPage" disabled="@IsFirstPage">
                    <i class="bi bi-arrow-left"></i> Previous
                </button>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Page @_currentPage of @TotalPages</span>
            </li>
            <li class="page-item @(IsLastPage ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage" disabled="@IsLastPage">
                    Next <i class="bi bi-arrow-right"></i>
                </button>
            </li>
        </ul>
    </nav>
</div>

@code {
    private List<Match> _matches = [];
    private List<Match> _filteredMatches = [];
    private List<Match> PaginatedMatches => _filteredMatches
        .Skip((_currentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    private List<Team> _teams = [];
    private List<Season> _seasons = [];
    private int? SelectedSeasonId
    {
        get => _selectedSeasonIdBackingField;
        set
        {
            _selectedSeasonIdBackingField = value;
            ApplyFilters();
        }
    }
    private int? SelectedTeamId
    {
        get => _selectedTeamIdBackingField;
        set
        {
            _selectedTeamIdBackingField = value;
            ApplyFilters();
        }
    }

    private int? _selectedSeasonIdBackingField;
    private int? _selectedTeamIdBackingField;
    private int _currentPage = 1;
    private const int PageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)_filteredMatches.Count / PageSize);
    private bool IsFirstPage => _currentPage == 1;
    private bool IsLastPage => _currentPage >= TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        _matches = await context.Matches
            .Include(m => m.HomeTeam)
            .Include(m => m.AwayTeam)
            .Include(m => m.Season)
            .OrderByDescending(m => m.Kickoff)
            .ToListAsync();

        _teams = await DataService.GetAllAsync<Team>();
        _seasons = await DataService.GetAllAsync<Season>();

        SelectedTeamId = UserSession.CurrentUser?.TeamId ?? null;

        var today = DateTime.Now;
        SelectedSeasonId = _seasons.FirstOrDefault(season => today >= season.StartDate && today <= season.EndDate)?.Id;

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredMatches = _matches;

        if (SelectedTeamId.HasValue)
        {
            _filteredMatches = _filteredMatches
                .Where(m => m.HomeTeamId == SelectedTeamId || m.AwayTeamId == SelectedTeamId)
                .ToList();
        }

        if (SelectedSeasonId.HasValue)
        {
            _filteredMatches = _filteredMatches
                .Where(m => m.SeasonId == SelectedSeasonId)
                .ToList();
        }

        _currentPage = 1; // Reset to the first page when filters are applied
        StateHasChanged();
    }

    private void NextPage()
    {
        if (_currentPage < TotalPages)
        {
            _currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }
}
