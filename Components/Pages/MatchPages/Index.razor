@page "/matches"
@inject IDbContextFactory<LocalFantasyLeague.Data.LocalFantasyLeagueContext> DbFactory

<h3>All Matches</h3>

<a href="/matches/create" class="btn btn-primary mb-3">Add Match</a>

<div class="mb-3">
    <label for="teamFilter" class="form-label">Filter by Team:</label>
    <select id="teamFilter" class="form-select" @onchange="FilterMatchesByTeam">
        <option value="">All Teams</option>
        @foreach (var team in Teams)
        {
            <option value="@team.Id">@team.Name</option>
        }
    </select>
</div>

<div class="table-responsive">
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered">
            <thead>
                <tr>
                    <th>Kickoff</th>
                    <th>Home</th>
                    <th>Away</th>
                    <th>Result</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in FilteredMatches)
                {
                    <tr>
                        <td>@match.Kickoff.ToString("g")</td>
                        <td>@match.HomeTeam.Name</td>
                        <td>@match.AwayTeam.Name</td>
                        <td>
                            @if (match.Kickoff < DateTime.Now)
                            {
                                @($"{match.HomeTeamGoals} - {match.AwayTeamGoals}")
                            }
                            else
                            {
                                <span class="text-muted">TBD</span>
                            }
                        </td>
                        <td>
                            <a href="/matches/details/@match.Id">Details</a> |
                            <a href="/matches/edit/@match.Id">Edit</a> |
                            <a href="/matches/delete/@match.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private List<Match> Matches = new();
    private List<Match> FilteredMatches = new();
    private List<Team> Teams = new();
    private int? SelectedTeamId;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Matches = await context.Matches
            .Include(m => m.HomeTeam)
            .Include(m => m.AwayTeam)
            .OrderBy(m => m.Kickoff)
            .ToListAsync();
        Teams = await context.Teams.ToListAsync();
        FilteredMatches = Matches; // Initially show all players
    }

    private void FilterMatchesByTeam(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var teamId))
        {
            SelectedTeamId = teamId;
            FilteredMatches = Matches.Where(p => p.HomeTeamId == teamId || p.AwayTeamId == teamId).ToList();
        }
        else
        {
            SelectedTeamId = null;
            FilteredMatches = Matches; // Show all players if no team is selected
        }

        // Notify Blazor to re-render the UI
        StateHasChanged();
    }
}
