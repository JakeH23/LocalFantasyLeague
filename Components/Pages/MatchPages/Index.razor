@page "/matches"
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory

<h3 class="text-center my-4 text-primary">All Matches</h3>
@if (UserSession.CurrentUser != null)
{
    <a href="/matches/create" class="btn btn-outline-primary mb-3">Add Match</a>
}

<!-- Season Filter -->
<div class="mb-3">
    <label for="seasonFilter" class="form-label">Filter by Season:</label>
    <select id="seasonFilter" class="form-select" @onchange="FilterMatchesBySeason">
        <option value="">All Seasons</option>
        @foreach (var season in _seasons)
        {
            <option value="@season.Id">@season.Name (@season.StartDate:MMM yyyy - @season.EndDate:MMM yyyy)</option>
        }
    </select>
</div>

<!-- Team Filter -->
<div class="mb-3">
    <label for="teamFilter" class="form-label">Filter by Team:</label>
    <select id="teamFilter" class="form-select" @onchange="FilterMatchesByTeam">
        <option value="">All Teams</option>
        @foreach (var team in _teams)
        {
            <option value="@team.Id">@team.Name</option>
        }
    </select>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="bg-light text-dark">
            <tr>
                <th>Kickoff</th>
                <th>Home</th>
                <th>Away</th>
                <th>Result</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in _filteredMatches)
            {
                <tr>
                    <td>@match.Kickoff.ToString("MMM dd, yyyy")</td>
                    <td>@match.HomeTeam.Name</td>
                    <td>@match.AwayTeam.Name</td>
                    <td>
                        @if (match.Kickoff < DateTime.Now)
                        {
                            <span class="badge bg-success">@match.HomeTeamGoals - @match.AwayTeamGoals</span>
                        }
                        else
                        {
                            <span class="text-muted">TBD</span>
                        }
                    </td>
                    <td>
                        @if (UserSession.CurrentUser == null)
                        {
                            <a href="/matches/details/@match.Id" class="btn btn-outline-info btn-sm">Details</a>
                        }
                        else
                        {
                            <a href="/matches/details/@match.Id" class="btn btn-outline-info btn-sm me-2">Details</a>
                            <a href="/matches/edit/@match.Id" class="btn btn-outline-warning btn-sm me-2">Edit</a>
                            <a href="/matches/delete/@match.Id" class="btn btn-outline-danger btn-sm">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Match> _matches = [];
    private List<Match> _filteredMatches = [];
    private List<Team> _teams = [];
    private List<Season> _seasons = [];
    private int? _selectedTeamId;
    private int? _selectedSeasonId;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();

        _matches = await context.Matches
            .Include(m => m.HomeTeam)
            .Include(m => m.AwayTeam)
            .Include(m => m.Season)
            .OrderBy(m => m.Kickoff)
            .ToListAsync();

        _teams = await DataService.GetAllAsync<Team>();
        _seasons = await DataService.GetAllAsync<Season>();
        _filteredMatches = _matches; // Initially show all matches
    }

    private void FilterMatchesByTeam(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var teamId))
        {
            _selectedTeamId = teamId;
        }
        else
        {
            _selectedTeamId = null;
        }

        ApplyFilters();
    }

    private void FilterMatchesBySeason(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var seasonId))
        {
            _selectedSeasonId = seasonId;
        }
        else
        {
            _selectedSeasonId = null;
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredMatches = _matches;

        if (_selectedTeamId.HasValue)
        {
            _filteredMatches = _filteredMatches
                .Where(m => m.HomeTeamId == _selectedTeamId || m.AwayTeamId == _selectedTeamId)
                .ToList();
        }

        if (_selectedSeasonId.HasValue)
        {
            _filteredMatches = _filteredMatches
                .Where(m => m.SeasonId == _selectedSeasonId)
                .ToList();
        }

        StateHasChanged();
    }
}
