@page "/fantasy-details"
@rendermode InteractiveServer
@inject IDbContextFactory<LocalFantasyLeagueContext> DbFactory

<h3>Fantasy Player Points and Stats</h3>

<div class="mb-3">
    <label for="teamFilter" class="form-label">Filter by Team:</label>
    <select id="teamFilter" class="form-select" @onchange="FilterPlayersByTeam">
        <option value="">All Teams</option>
        @foreach (var team in _teams)
        {
            <option value="@team.Id">@team.Name</option>
        }
    </select>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Team</th>
                <th>Appearances</th>
                <th><i class="fas fa-futbol"></i> Goals</th>
                <th>Assists</th>
                <th>Yellow Cards</th>
                <th>Red Cards</th>
                <th>Penalty Saves</th>
                <th>Clean Sheets</th>
                <th>Penalty Missed</th>
                <th class="highlight-column">Total Points</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in _filteredPlayersWithPoints.OrderByDescending(p => p.TotalPoints))
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.TeamName</td>
                    <td class="numeric-column">@player.Appearances</td>
                    <td class="numeric-column">@player.Goals</td>
                    <td class="numeric-column">@player.Assists</td>
                    <td class="numeric-column">@player.YellowCards</td>
                    <td class="numeric-column">@player.RedCards</td>
                    <td class="numeric-column">@player.PenaltySaves</td>
                    <td class="numeric-column">@player.CleanSheets</td>
                    <td class="numeric-column">@player.PenaltyMissed</td>
                    <td class="numeric-column highlight-column">@player.TotalPoints</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private List<PlayerWithPoints> _playersWithPoints = [];
    private List<PlayerWithPoints> _filteredPlayersWithPoints = [];
    private List<Team> _teams = [];
    private int? _selectedTeamId;

    protected override async Task OnInitializedAsync()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        var players = await db.Players.Include(p => p.PerformanceStats).Include(p => p.Team).ToListAsync();

        _teams = await DataService.GetAllAsync<Team>();

        _playersWithPoints = players.Select(player => new PlayerWithPoints
            {
                Name = player.Name,
                TeamName = player.Team?.Name ?? "No Team",
                TeamId = player.TeamId,
                Appearances = player.PerformanceStats.Count(stat => stat.Appearance),
                Goals = player.PerformanceStats.Sum(stat => stat.Goals),
                Assists = player.PerformanceStats.Sum(stat => stat.Assists),
                YellowCards = player.PerformanceStats.Count(stat => stat.YellowCard),
                RedCards = player.PerformanceStats.Count(stat => stat.RedCard),
                PenaltySaves = player.PerformanceStats.Sum(stat => stat.PenaltySaves),
                CleanSheets = player.PerformanceStats.Count(stat => stat.CleanSheet),
                PenaltyMissed = player.PerformanceStats.Sum(stat => stat.PenaltyMissed),
                TotalPoints = PointCalculator.CalculateTotalPoints(player.PerformanceStats)
            }).ToList();

        _filteredPlayersWithPoints = _playersWithPoints; // Initially show all players
    }

    private void FilterPlayersByTeam(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var teamId))
        {
            _selectedTeamId = teamId;
            _filteredPlayersWithPoints = _playersWithPoints
                .Where(p => p.TeamId == teamId)
                .ToList();
        }
        else
        {
            _selectedTeamId = null;
            _filteredPlayersWithPoints = _playersWithPoints; // Show all players if no team is selected
        }

        StateHasChanged(); // Notify Blazor to re-render the UI
    }
}
